// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  wishlist      WishlistItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product models
model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  salePrice   Decimal? @db.Decimal(10, 2)
  inventory   Int      @default(0)
  images      String[] // Array of image URLs
  featured    Boolean  @default(false)
  isNew       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  
  // Relations
  category    Category     @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  reviews     Review[]
  orderItems  OrderItem[]
  wishlist    WishlistItem[]
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  size      String?
  color     String?
  material  String?
  style     String?
  sku       String   @unique
  price     Decimal  @db.Decimal(10, 2)
  inventory Int      @default(0)
  images    String[] // Array of image URLs
  
  // Relations
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  image       String?
  slug        String   @unique
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  parent      Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  products    Product[]
}

// Order models
model Order {
  id              String    @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Decimal   @db.Decimal(10, 2)
  shippingFee     Decimal   @db.Decimal(10, 2)
  tax             Decimal   @db.Decimal(10, 2)
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  shippingAddressId String?
  billingAddressId  String?
  trackingNumber  String?
  notes           String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address?   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?   @relation("BillingAddress", fields: [billingAddressId], references: [id])
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  productId       String
  variantId       String?
  quantity        Int
  price           Decimal   @db.Decimal(10, 2)
  
  // Relations
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id])
  variant         ProductVariant? @relation(fields: [variantId], references: [id])
}

model Address {
  id              String    @id @default(cuid())
  userId          String
  type            AddressType
  firstName       String
  lastName        String
  address1        String
  address2        String?
  city            String
  state           String
  postalCode      String
  country         String
  phone           String?
  isDefault       Boolean   @default(false)
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders  Order[]   @relation("ShippingAddress")
  billingOrders   Order[]   @relation("BillingAddress")
}

// Review model
model Review {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int
  title       String?
  comment     String?  @db.Text
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Wishlist model
model WishlistItem {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}
