generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
  wishlist      WishlistItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Decimal          @db.Decimal(10, 2)
  salePrice   Decimal?         @db.Decimal(10, 2)
  inventory   Int              @default(0)
  images      String[]
  featured    Boolean          @default(false)
  isNew       Boolean          @default(false)
  slug        String           @unique
  material    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categoryId  String
  orderItems  OrderItem[]
  category    Category         @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  reviews     Review[]
  wishlist    WishlistItem[]
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  size       String?
  color      String?
  material   String?
  style      String?
  sku        String      @unique
  price      Decimal     @db.Decimal(10, 2)
  inventory  Int         @default(0)
  images     String[]
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String?
  image         String?
  slug          String     @unique
  parentId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToSubcategory")
  products      Product[]
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  status            OrderStatus   @default(PENDING)
  total             Decimal       @db.Decimal(10, 2)
  shippingFee       Decimal       @db.Decimal(10, 2)
  tax               Decimal       @db.Decimal(10, 2)
  paymentMethod     String?
  paymentStatus     PaymentStatus @default(PENDING)
  shippingAddressId String?
  billingAddressId  String?
  trackingNumber    String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  billingAddress    Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model Address {
  id             String      @id @default(cuid())
  userId         String
  type           AddressType
  firstName      String
  lastName       String
  address1       String
  address2       String?
  city           String
  state          String
  postalCode     String
  country        String
  phone          String?
  isDefault      Boolean     @default(false)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]     @relation("BillingAddress")
  shippingOrders Order[]     @relation("ShippingAddress")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Slider {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  imageUrl    String
  buttonText  String?
  buttonLink  String?
  buttonStyle String?  @default("default") 
  buttonSize  String?  @default("default") 
  buttonClass String?  
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}
